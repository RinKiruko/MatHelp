# Generated by Django 3.0.3 on 2020-06-22 11:34

import crud.models.mixins.template_model_meta
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='StatementCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50, verbose_name='Название категории')),
                ('legal_number', models.CharField(max_length=50, verbose_name='Юридический номер')),
                ('maximum_payment', models.DecimalField(blank=True, decimal_places=2, max_digits=7, null=True, verbose_name='Максимальная выплата')),
                ('month_payment', models.BooleanField(default=False, verbose_name='Ежемесячная выплата')),
                ('weight', models.FloatField(default=1.0, verbose_name='Приоритет')),
            ],
            options={
                'verbose_name': 'Категория заявления',
                'verbose_name_plural': 'Категории заявлений',
            },
            bases=(crud.models.mixins.template_model_meta.TemplateModelMetaInfoMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Statement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('requested_payment', models.DecimalField(decimal_places=2, max_digits=7, verbose_name='Запрашиваемая сумма')),
                ('application_date', models.DateField(verbose_name='Дата Подачи')),
                ('student_first_name', models.CharField(max_length=50, verbose_name='Имя')),
                ('student_last_name', models.CharField(max_length=50, verbose_name='Фамилия')),
                ('student_middle_name', models.CharField(blank=True, max_length=50, verbose_name='Отчество')),
                ('statement_category', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='statements', to='crud.StatementCategory', verbose_name='Категория')),
            ],
            options={
                'verbose_name': 'Заявление',
                'verbose_name_plural': 'Заявления',
            },
            bases=(crud.models.mixins.template_model_meta.TemplateModelMetaInfoMixin, models.Model),
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
